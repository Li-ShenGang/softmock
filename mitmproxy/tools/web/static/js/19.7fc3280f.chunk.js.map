{"version":3,"sources":["../node_modules/codemirror/mode/twig/twig.js","../node_modules/codemirror/addon/mode/multiplex.js"],"names":["CodeMirror","defineMode","keywords","operator","sign","atom","number","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","match","instring","next","eat","sol","RegExp","join","startState","token","config","parserConfig","twigInner","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME","mod","require","outer","others","Array","prototype","slice","call","arguments","indexOf","string","pattern","from","returnEnd","found","length","m","exec","index","innerActive","inner","copyState","curInner","oldContent","this","pos","delimStyle","innerToken","innerStyle","cutOff","Infinity","i","other","outerIndent","indent","possibleOuterIndent","Pass","outerToken","textAfter","line","blankLine","electricChars","innerMode"],"mappings":"qHAUG,SAASA,GACV,aAEAA,EAAWC,WAAW,cAAc,WAClC,IAAIC,EAAW,CAAC,MAAO,KAAM,aAAc,gBAAiB,QAAS,KAAM,WAAY,OAAQ,SAAU,UAAW,MAAO,SAAU,QAAS,WAAY,SAAU,YAAa,QAAS,OAAQ,KAAM,QAAS,KAAM,KAAM,UAAW,SAAU,MAAO,KAAM,MAAO,YAAa,eAAgB,OAAQ,UAAW,QAAS,WAAY,aAAc,gBAAiB,QAAS,WAAY,MAAO,WAAY,eAC9YC,EAAW,oBACXC,EAAO,aACPC,EAAO,CAAC,OAAQ,QAAS,OAAQ,QAAS,UAAW,cAAe,eAAgB,OAAQ,MAAO,WAAY,SAAU,WACzHC,EAAS,6BAKb,SAASC,EAAWC,EAAQC,GAC1B,IAAIC,EAAKF,EAAOG,OAGhB,GAAIF,EAAMG,UAOR,OANKJ,EAAOK,OAAO,OAGjBL,EAAOM,SAAS,QAChBL,EAAMG,WAAY,GAHlBJ,EAAOO,YAKF,UAEF,GAAIN,EAAMO,MAAO,CAEtB,GAAIP,EAAMN,SAAU,CAElB,GADAM,EAAMN,UAAW,EACbK,EAAOS,MAAMZ,GACf,MAAO,OAET,GAAIG,EAAOS,MAAMX,GACf,MAAO,SAIX,GAAIG,EAAML,KAAM,CAEd,GADAK,EAAML,MAAO,EACTI,EAAOS,MAAMZ,GACf,MAAO,OAET,GAAIG,EAAOS,MAAMX,GACf,MAAO,SAIX,GAAIG,EAAMS,SAKR,OAJIR,GAAMD,EAAMS,WACdT,EAAMS,UAAW,GAEnBV,EAAOW,OACA,SACF,GAAU,KAANT,GAAmB,KAANA,EAGtB,OAFAD,EAAMS,SAAWR,EACjBF,EAAOW,OACA,SACF,GAAIX,EAAOS,MAAMR,EAAMO,MAAQ,MAAQR,EAAOY,IAAI,MAAQZ,EAAOS,MAAMR,EAAMO,MAAQ,KAE1F,OADAP,EAAMO,OAAQ,EACP,MACF,GAAIR,EAAOS,MAAMd,GAEtB,OADAM,EAAMN,UAAW,EACV,WACF,GAAIK,EAAOS,MAAMb,GACtBK,EAAML,MAAO,OAEb,GAAII,EAAOY,IAAI,MAAQZ,EAAOa,MAAO,CACnC,GAAIb,EAAOS,MAAMf,GACf,MAAO,UAET,GAAIM,EAAOS,MAAMZ,GACf,MAAO,OAET,GAAIG,EAAOS,MAAMX,GACf,MAAO,SAELE,EAAOa,OACTb,EAAOW,YAGTX,EAAOW,OAIX,MAAO,WACF,GAAIX,EAAOY,IAAI,KAAM,CAC1B,GAAIZ,EAAOY,IAAI,KAQb,OAPAX,EAAMG,WAAY,EACbJ,EAAOK,OAAO,OAGjBL,EAAOM,SAAS,QAChBL,EAAMG,WAAY,GAHlBJ,EAAOO,YAKF,UAEF,GAAIL,EAAKF,EAAOY,IAAI,QAOzB,OALAX,EAAMO,MAAQN,EACJ,KAANA,IACFD,EAAMO,MAAQ,KAEhBR,EAAOY,IAAI,KACJ,MAGXZ,EAAOW,OAGT,OApGAjB,EAAW,IAAIoB,OAAO,KAAOpB,EAASqB,KAAK,OAAS,SACpDlB,EAAO,IAAIiB,OAAO,KAAOjB,EAAKkB,KAAK,OAAS,SAmGrC,CACLC,WAAY,WACV,MAAO,IAETC,MAAO,SAAUjB,EAAQC,GACvB,OAAOF,EAAUC,EAAQC,QAK/BT,EAAWC,WAAW,QAAQ,SAASyB,EAAQC,GAC7C,IAAIC,EAAY5B,EAAW6B,QAAQH,EAAQ,cAC3C,OAAKC,GAAiBA,EAAaG,KAC5B9B,EAAW+B,iBAChB/B,EAAW6B,QAAQH,EAAQC,EAAaG,MAAO,CAC7CE,KAAM,UAAWC,MAAO,UAAWC,KAAMN,EAAWO,iBAAiB,IAHzBP,KAOlD5B,EAAWoC,WAAW,cAAe,QAtInCC,CAAIC,EAAQ,IAA0BA,EAAQ,O,qBCK/C,SAAStC,GACZ,aAEAA,EAAW+B,iBAAmB,SAASQ,GAErC,IAAIC,EAASC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,GAEnD,SAASC,EAAQC,EAAQC,EAASC,EAAMC,GACtC,GAAsB,iBAAXF,EAAqB,CAC9B,IAAIG,EAAQJ,EAAOD,QAAQE,EAASC,GACpC,OAAOC,GAAaC,GAAS,EAAIA,EAAQH,EAAQI,OAASD,EAE5D,IAAIE,EAAIL,EAAQM,KAAKL,EAAOF,EAAOJ,MAAMM,GAAQF,GACjD,OAAOM,EAAIA,EAAEE,MAAQN,GAAQC,EAAYG,EAAE,GAAGD,OAAS,IAAM,EAG/D,MAAO,CACL5B,WAAY,WACV,MAAO,CACLe,MAAOvC,EAAWwB,WAAWe,GAC7BiB,YAAa,KACbC,MAAO,OAIXC,UAAW,SAASjD,GAClB,MAAO,CACL8B,MAAOvC,EAAW0D,UAAUnB,EAAO9B,EAAM8B,OACzCiB,YAAa/C,EAAM+C,YACnBC,MAAOhD,EAAM+C,aAAexD,EAAW0D,UAAUjD,EAAM+C,YAAYtB,KAAMzB,EAAMgD,SAInFhC,MAAO,SAASjB,EAAQC,GACtB,GAAKA,EAAM+C,YA0BJ,CACL,IAAIG,EAAWlD,EAAM+C,YACrB,GADkCI,EAAapD,EAAOuC,QACjDY,EAAS1B,OAASzB,EAAOa,MAE5B,OADAZ,EAAM+C,YAAc/C,EAAMgD,MAAQ,KAC3BI,KAAKpC,MAAMjB,EAAQC,GAG5B,IADI0C,EAAQQ,EAAS1B,MAAQa,EAAQc,EAAYD,EAAS1B,MAAOzB,EAAOsD,IAAKH,EAASxB,kBAAoB,IAC7F3B,EAAOsD,MAAQH,EAASxB,gBAGnC,OAFA3B,EAAOS,MAAM0C,EAAS1B,OACtBxB,EAAM+C,YAAc/C,EAAMgD,MAAQ,KAC3BE,EAASI,YAAeJ,EAASI,WAAa,IAAMJ,EAASI,WAAa,SAE/EZ,GAAS,IAAG3C,EAAOuC,OAASa,EAAWjB,MAAM,EAAGQ,IACpD,IAAIa,EAAaL,EAASzB,KAAKT,MAAMjB,EAAQC,EAAMgD,OAWnD,OAVIN,GAAS,IAAG3C,EAAOuC,OAASa,GAE5BT,GAAS3C,EAAOsD,KAAOH,EAASxB,kBAClC1B,EAAM+C,YAAc/C,EAAMgD,MAAQ,MAEhCE,EAASM,aACKD,EAAZA,EAAyBA,EAAa,IAAML,EAASM,WACvCN,EAASM,YAGtBD,EAhDP,IADA,IAAIE,EAASC,IAAUP,EAAapD,EAAOuC,OAClCqB,EAAI,EAAGA,EAAI5B,EAAOY,SAAUgB,EAAG,CACtC,IACIjB,EADAkB,EAAQ7B,EAAO4B,GAEnB,IADIjB,EAAQL,EAAQc,EAAYS,EAAMrC,KAAMxB,EAAOsD,OACtCtD,EAAOsD,IAAK,CAClBO,EAAMlC,iBAAiB3B,EAAOS,MAAMoD,EAAMrC,MAC/CvB,EAAM+C,YAAca,EAGpB,IAAIC,EAAc,EAClB,GAAI/B,EAAMgC,OAAQ,CAChB,IAAIC,EAAsBjC,EAAMgC,OAAO9D,EAAM8B,MAAO,GAAI,IACpDiC,IAAwBxE,EAAWyE,OAAMH,EAAcE,GAI7D,OADA/D,EAAMgD,MAAQzD,EAAWwB,WAAW6C,EAAMnC,KAAMoC,GACzCD,EAAMN,YAAeM,EAAMN,WAAa,IAAMM,EAAMN,WAAa,SACrD,GAAVZ,GAAeA,EAAQe,IAChCA,EAASf,GAGTe,GAAUC,MAAU3D,EAAOuC,OAASa,EAAWjB,MAAM,EAAGuB,IAC5D,IAAIQ,EAAanC,EAAMd,MAAMjB,EAAQC,EAAM8B,OAE3C,OADI2B,GAAUC,MAAU3D,EAAOuC,OAASa,GACjCc,GA6BXH,OAAQ,SAAS9D,EAAOkE,EAAWC,GACjC,IAAI1C,EAAOzB,EAAM+C,YAAc/C,EAAM+C,YAAYtB,KAAOK,EACxD,OAAKL,EAAKqC,OACHrC,EAAKqC,OAAO9D,EAAM+C,YAAc/C,EAAMgD,MAAQhD,EAAM8B,MAAOoC,EAAWC,GADpD5E,EAAWyE,MAItCI,UAAW,SAASpE,GAClB,IAAIyB,EAAOzB,EAAM+C,YAAc/C,EAAM+C,YAAYtB,KAAOK,EAIxD,GAHIL,EAAK2C,WACP3C,EAAK2C,UAAUpE,EAAM+C,YAAc/C,EAAMgD,MAAQhD,EAAM8B,OAEpD9B,EAAM+C,YAQ4B,OAA5B/C,EAAM+C,YAAYvB,QAC3BxB,EAAM+C,YAAc/C,EAAMgD,MAAQ,WARlC,IAAK,IAAIW,EAAI,EAAGA,EAAI5B,EAAOY,SAAUgB,EAAG,CACtC,IAAIC,EAAQ7B,EAAO4B,GACA,OAAfC,EAAMrC,OACRvB,EAAM+C,YAAca,EACpB5D,EAAMgD,MAAQzD,EAAWwB,WAAW6C,EAAMnC,KAAMA,EAAKqC,OAASrC,EAAKqC,OAAO9D,EAAM8B,MAAO,GAAI,IAAM,MAQzGuC,cAAevC,EAAMuC,cAErBC,UAAW,SAAStE,GAClB,OAAOA,EAAMgD,MAAQ,CAAChD,MAAOA,EAAMgD,MAAOvB,KAAMzB,EAAM+C,YAAYtB,MAAQ,CAACzB,MAAOA,EAAM8B,MAAOL,KAAMK,MAxHvGF,CAAIC,EAAQ","file":"static/js/19.7fc3280f.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"),  require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function() {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"twig\", function(config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base), {\n        open: /\\{[{#%]/, close: /[}#%]\\}/, mode: twigInner, parseDelimiters: true\n      }\n    );\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.multiplexingMode = function(outer /*, others */) {\n  // Others should be {open, close, mode [, delimStyle] [, innerStyle]} objects\n  var others = Array.prototype.slice.call(arguments, 1);\n\n  function indexOf(string, pattern, from, returnEnd) {\n    if (typeof pattern == \"string\") {\n      var found = string.indexOf(pattern, from);\n      return returnEnd && found > -1 ? found + pattern.length : found;\n    }\n    var m = pattern.exec(from ? string.slice(from) : string);\n    return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n  }\n\n  return {\n    startState: function() {\n      return {\n        outer: CodeMirror.startState(outer),\n        innerActive: null,\n        inner: null\n      };\n    },\n\n    copyState: function(state) {\n      return {\n        outer: CodeMirror.copyState(outer, state.outer),\n        innerActive: state.innerActive,\n        inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner)\n      };\n    },\n\n    token: function(stream, state) {\n      if (!state.innerActive) {\n        var cutOff = Infinity, oldContent = stream.string;\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          var found = indexOf(oldContent, other.open, stream.pos);\n          if (found == stream.pos) {\n            if (!other.parseDelimiters) stream.match(other.open);\n            state.innerActive = other;\n\n            // Get the outer indent, making sure to handle CodeMirror.Pass\n            var outerIndent = 0;\n            if (outer.indent) {\n              var possibleOuterIndent = outer.indent(state.outer, \"\", \"\");\n              if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n            }\n\n            state.inner = CodeMirror.startState(other.mode, outerIndent);\n            return other.delimStyle && (other.delimStyle + \" \" + other.delimStyle + \"-open\");\n          } else if (found != -1 && found < cutOff) {\n            cutOff = found;\n          }\n        }\n        if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n        var outerToken = outer.token(stream, state.outer);\n        if (cutOff != Infinity) stream.string = oldContent;\n        return outerToken;\n      } else {\n        var curInner = state.innerActive, oldContent = stream.string;\n        if (!curInner.close && stream.sol()) {\n          state.innerActive = state.inner = null;\n          return this.token(stream, state);\n        }\n        var found = curInner.close ? indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n        if (found == stream.pos && !curInner.parseDelimiters) {\n          stream.match(curInner.close);\n          state.innerActive = state.inner = null;\n          return curInner.delimStyle && (curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\");\n        }\n        if (found > -1) stream.string = oldContent.slice(0, found);\n        var innerToken = curInner.mode.token(stream, state.inner);\n        if (found > -1) stream.string = oldContent;\n\n        if (found == stream.pos && curInner.parseDelimiters)\n          state.innerActive = state.inner = null;\n\n        if (curInner.innerStyle) {\n          if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;\n          else innerToken = curInner.innerStyle;\n        }\n\n        return innerToken;\n      }\n    },\n\n    indent: function(state, textAfter, line) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (!mode.indent) return CodeMirror.Pass;\n      return mode.indent(state.innerActive ? state.inner : state.outer, textAfter, line);\n    },\n\n    blankLine: function(state) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (mode.blankLine) {\n        mode.blankLine(state.innerActive ? state.inner : state.outer);\n      }\n      if (!state.innerActive) {\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          if (other.open === \"\\n\") {\n            state.innerActive = other;\n            state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\", \"\") : 0);\n          }\n        }\n      } else if (state.innerActive.close === \"\\n\") {\n        state.innerActive = state.inner = null;\n      }\n    },\n\n    electricChars: outer.electricChars,\n\n    innerMode: function(state) {\n      return state.inner ? {state: state.inner, mode: state.innerActive.mode} : {state: state.outer, mode: outer};\n    }\n  };\n};\n\n});\n"],"sourceRoot":""}