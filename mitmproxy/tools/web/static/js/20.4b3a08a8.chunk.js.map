{"version":3,"sources":["../node_modules/codemirror/mode/gfm/gfm.js","../node_modules/codemirror/addon/mode/overlay.js"],"names":["CodeMirror","urlRE","defineMode","config","modeConfig","codeDepth","blankLine","state","code","gfmOverlay","startState","codeBlock","ateSpace","copyState","s","token","stream","combineTokens","match","skipToEnd","sol","peek","next","before","pos","eatWhile","difference","eatSpace","gitHubSpice","string","slice","start","test","charAt","markdownConfig","taskLists","strikethrough","emoji","attr","name","overlayMode","getMode","defineMIME","mod","require","base","overlay","combine","basePos","baseCur","overlayPos","overlayCur","streamSeen","Math","min","indent","textAfter","line","electricChars","innerMode","mode","baseToken","overlayToken"],"mappings":"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","file":"static/js/20.4b3a08a8.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../markdown/markdown\"), require(\"../../addon/mode/overlay\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../markdown/markdown\", \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar urlRE = /^((?:(?:aaas?|about|acap|adiumxtra|af[ps]|aim|apt|attachment|aw|beshare|bitcoin|bolo|callto|cap|chrome(?:-extension)?|cid|coap|com-eventbrite-attendee|content|crid|cvs|data|dav|dict|dlna-(?:playcontainer|playsingle)|dns|doi|dtn|dvb|ed2k|facetime|feed|file|finger|fish|ftp|geo|gg|git|gizmoproject|go|gopher|gtalk|h323|hcp|https?|iax|icap|icon|im|imap|info|ipn|ipp|irc[6s]?|iris(?:\\.beep|\\.lwz|\\.xpc|\\.xpcs)?|itms|jar|javascript|jms|keyparc|lastfm|ldaps?|magnet|mailto|maps|market|message|mid|mms|ms-help|msnim|msrps?|mtqp|mumble|mupdate|mvn|news|nfs|nih?|nntp|notes|oid|opaquelocktoken|palm|paparazzi|platform|pop|pres|proxy|psyc|query|res(?:ource)?|rmi|rsync|rtmp|rtsp|secondlife|service|session|sftp|sgn|shttp|sieve|sips?|skype|sm[bs]|snmp|soap\\.beeps?|soldat|spotify|ssh|steam|svn|tag|teamspeak|tel(?:net)?|tftp|things|thismessage|tip|tn3270|tv|udp|unreal|urn|ut2004|vemmi|ventrilo|view-source|webcal|wss?|wtai|wyciwyg|xcon(?:-userid)?|xfire|xmlrpc\\.beeps?|xmpp|xri|ymsgr|z39\\.50[rs]?):(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\([^\\s()<>]*\\))+(?:\\([^\\s()<>]*\\)|[^\\s`*!()\\[\\]{};:'\".,<>?«»“”‘’]))/i\n\nCodeMirror.defineMode(\"gfm\", function(config, modeConfig) {\n  var codeDepth = 0;\n  function blankLine(state) {\n    state.code = false;\n    return null;\n  }\n  var gfmOverlay = {\n    startState: function() {\n      return {\n        code: false,\n        codeBlock: false,\n        ateSpace: false\n      };\n    },\n    copyState: function(s) {\n      return {\n        code: s.code,\n        codeBlock: s.codeBlock,\n        ateSpace: s.ateSpace\n      };\n    },\n    token: function(stream, state) {\n      state.combineTokens = null;\n\n      // Hack to prevent formatting override inside code blocks (block and inline)\n      if (state.codeBlock) {\n        if (stream.match(/^```+/)) {\n          state.codeBlock = false;\n          return null;\n        }\n        stream.skipToEnd();\n        return null;\n      }\n      if (stream.sol()) {\n        state.code = false;\n      }\n      if (stream.sol() && stream.match(/^```+/)) {\n        stream.skipToEnd();\n        state.codeBlock = true;\n        return null;\n      }\n      // If this block is changed, it may need to be updated in Markdown mode\n      if (stream.peek() === '`') {\n        stream.next();\n        var before = stream.pos;\n        stream.eatWhile('`');\n        var difference = 1 + stream.pos - before;\n        if (!state.code) {\n          codeDepth = difference;\n          state.code = true;\n        } else {\n          if (difference === codeDepth) { // Must be exact\n            state.code = false;\n          }\n        }\n        return null;\n      } else if (state.code) {\n        stream.next();\n        return null;\n      }\n      // Check if space. If so, links can be formatted later on\n      if (stream.eatSpace()) {\n        state.ateSpace = true;\n        return null;\n      }\n      if (stream.sol() || state.ateSpace) {\n        state.ateSpace = false;\n        if (modeConfig.gitHubSpice !== false) {\n          if(stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+@)?(?=.{0,6}\\d)(?:[a-f0-9]{7,40}\\b)/)) {\n            // User/Project@SHA\n            // User@SHA\n            // SHA\n            state.combineTokens = true;\n            return \"link\";\n          } else if (stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+)?#[0-9]+\\b/)) {\n            // User/Project#Num\n            // User#Num\n            // #Num\n            state.combineTokens = true;\n            return \"link\";\n          }\n        }\n      }\n      if (stream.match(urlRE) &&\n          stream.string.slice(stream.start - 2, stream.start) != \"](\" &&\n          (stream.start == 0 || /\\W/.test(stream.string.charAt(stream.start - 1)))) {\n        // URLs\n        // Taken from http://daringfireball.net/2010/07/improved_regex_for_matching_urls\n        // And then (issue #1160) simplified to make it not crash the Chrome Regexp engine\n        // And then limited url schemes to the CommonMark list, so foo:bar isn't matched as a URL\n        state.combineTokens = true;\n        return \"link\";\n      }\n      stream.next();\n      return null;\n    },\n    blankLine: blankLine\n  };\n\n  var markdownConfig = {\n    taskLists: true,\n    strikethrough: true,\n    emoji: true\n  };\n  for (var attr in modeConfig) {\n    markdownConfig[attr] = modeConfig[attr];\n  }\n  markdownConfig.name = \"markdown\";\n  return CodeMirror.overlayMode(CodeMirror.getMode(config, markdownConfig), gfmOverlay);\n\n}, \"markdown\");\n\n  CodeMirror.defineMIME(\"text/x-gfm\", \"gfm\");\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.overlayMode = function(base, overlay, combine) {\n  return {\n    startState: function() {\n      return {\n        base: CodeMirror.startState(base),\n        overlay: CodeMirror.startState(overlay),\n        basePos: 0, baseCur: null,\n        overlayPos: 0, overlayCur: null,\n        streamSeen: null\n      };\n    },\n    copyState: function(state) {\n      return {\n        base: CodeMirror.copyState(base, state.base),\n        overlay: CodeMirror.copyState(overlay, state.overlay),\n        basePos: state.basePos, baseCur: null,\n        overlayPos: state.overlayPos, overlayCur: null\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream != state.streamSeen ||\n          Math.min(state.basePos, state.overlayPos) < stream.start) {\n        state.streamSeen = stream;\n        state.basePos = state.overlayPos = stream.start;\n      }\n\n      if (stream.start == state.basePos) {\n        state.baseCur = base.token(stream, state.base);\n        state.basePos = stream.pos;\n      }\n      if (stream.start == state.overlayPos) {\n        stream.pos = stream.start;\n        state.overlayCur = overlay.token(stream, state.overlay);\n        state.overlayPos = stream.pos;\n      }\n      stream.pos = Math.min(state.basePos, state.overlayPos);\n\n      // state.overlay.combineTokens always takes precedence over combine,\n      // unless set to null\n      if (state.overlayCur == null) return state.baseCur;\n      else if (state.baseCur != null &&\n               state.overlay.combineTokens ||\n               combine && state.overlay.combineTokens == null)\n        return state.baseCur + \" \" + state.overlayCur;\n      else return state.overlayCur;\n    },\n\n    indent: base.indent && function(state, textAfter, line) {\n      return base.indent(state.base, textAfter, line);\n    },\n    electricChars: base.electricChars,\n\n    innerMode: function(state) { return {state: state.base, mode: base}; },\n\n    blankLine: function(state) {\n      var baseToken, overlayToken;\n      if (base.blankLine) baseToken = base.blankLine(state.base);\n      if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n\n      return overlayToken == null ?\n        baseToken :\n        (combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken);\n    }\n  };\n};\n\n});\n"],"sourceRoot":""}