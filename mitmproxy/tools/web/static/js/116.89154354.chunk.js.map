{"version":3,"sources":["../node_modules/codemirror/mode/verilog/verilog.js"],"names":["CodeMirror","defineMode","config","parserConfig","indentUnit","statementIndentUnit","dontAlignCalls","noIndentKeywords","multiLineStrings","hooks","words","str","obj","split","i","length","curPunc","curKeyword","keywords","isOperatorChar","isBracketChar","unsignedNumber","decimalLiteral","binaryLiteral","octLiteral","hexLiteral","realLiteral","closingBracketOrWord","closingBracket","blockKeywords","openClose","keyword","undefined","statementKeywords","tokenBase","stream","state","style","ch","peek","test","next","eatWhile","tokenize","tokenString","eat","tokenComment","skipToEnd","backUp","match","cur","current","quote","escaped","end","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","c","context","popContext","t","isClosing","text","contextClosing","closingKeywords","buildElectricInputRegEx","allClosings","closings","j","push","RegExp","join","electricInput","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","close","indent","textAfter","Pass","fromHook","firstChar","charAt","closing","possibleClosing","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME","name","tlvIdentifierStyle","\"","tlvScopePrefixChars","tlvIndentUnit","tlvTrackStatements","tlvIdentMatch","tlvFirstLevelIndentMatch","tlvLineIndentationMatch","tlvCommentMatch","tlvScopeStyle","depth","tlvIndentationStyle","tlvIdentNext","tlvInBlockComment","string","tlvCodeActive","pos","blankline","chPos","bodyString","slice","statementComment","pop","tlvNextIndent","beginStatement","eol","prefix","mnemonic","hasOwnProperty","mod","require"],"mappings":"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","file":"static/js/116.89154354.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"verilog\", function(config, parserConfig) {\n\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      noIndentKeywords = parserConfig.noIndentKeywords || [],\n      multiLineStrings = parserConfig.multiLineStrings,\n      hooks = parserConfig.hooks || {};\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  /**\n   * Keywords from IEEE 1800-2012\n   */\n  var keywords = words(\n    \"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind \" +\n    \"bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config \" +\n    \"const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable \" +\n    \"dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup \" +\n    \"endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask \" +\n    \"enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin \" +\n    \"function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import \" +\n    \"incdir include initial inout input inside instance int integer interconnect interface intersect join join_any \" +\n    \"join_none large let liblist library local localparam logic longint macromodule matches medium modport module \" +\n    \"nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed \" +\n    \"parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup \" +\n    \"pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg \" +\n    \"reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime \" +\n    \"s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify \" +\n    \"specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on \" +\n    \"table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior \" +\n    \"trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void \" +\n    \"wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor\");\n\n  /** Operators from IEEE 1800-2012\n     unary_operator ::=\n       + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n     binary_operator ::=\n       + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **\n       | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<\n       | -> | <->\n     inc_or_dec_operator ::= ++ | --\n     unary_module_path_operator ::=\n       ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n     binary_module_path_operator ::=\n       == | != | && | || | & | | | ^ | ^~ | ~^\n  */\n  var isOperatorChar = /[\\+\\-\\*\\/!~&|^%=?:]/;\n  var isBracketChar = /[\\[\\]{}()]/;\n\n  var unsignedNumber = /\\d[0-9_]*/;\n  var decimalLiteral = /\\d*\\s*'s?d\\s*\\d[0-9_]*/i;\n  var binaryLiteral = /\\d*\\s*'s?b\\s*[xz01][xz01_]*/i;\n  var octLiteral = /\\d*\\s*'s?o\\s*[xz0-7][xz0-7_]*/i;\n  var hexLiteral = /\\d*\\s*'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*/i;\n  var realLiteral = /(\\d[\\d_]*(\\.\\d[\\d_]*)?E-?[\\d_]+)|(\\d[\\d_]*\\.\\d[\\d_]*)/i;\n\n  var closingBracketOrWord = /^((\\w+)|[)}\\]])/;\n  var closingBracket = /[)}\\]]/;\n\n  var curPunc;\n  var curKeyword;\n\n  // Block openings which are closed by a matching keyword in the form of (\"end\" + keyword)\n  // E.g. \"task\" => \"endtask\"\n  var blockKeywords = words(\n    \"case checker class clocking config function generate interface module package \" +\n    \"primitive program property specify sequence table task\"\n  );\n\n  // Opening/closing pairs\n  var openClose = {};\n  for (var keyword in blockKeywords) {\n    openClose[keyword] = \"end\" + keyword;\n  }\n  openClose[\"begin\"] = \"end\";\n  openClose[\"casex\"] = \"endcase\";\n  openClose[\"casez\"] = \"endcase\";\n  openClose[\"do\"   ] = \"while\";\n  openClose[\"fork\" ] = \"join;join_any;join_none\";\n  openClose[\"covergroup\"] = \"endgroup\";\n\n  for (var i in noIndentKeywords) {\n    var keyword = noIndentKeywords[i];\n    if (openClose[keyword]) {\n      openClose[keyword] = undefined;\n    }\n  }\n\n  // Keywords which open statements that are ended with a semi-colon\n  var statementKeywords = words(\"always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while\");\n\n  function tokenBase(stream, state) {\n    var ch = stream.peek(), style;\n    if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;\n    if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false)\n      return style;\n\n    if (/[,;:\\.]/.test(ch)) {\n      curPunc = stream.next();\n      return null;\n    }\n    if (isBracketChar.test(ch)) {\n      curPunc = stream.next();\n      return \"bracket\";\n    }\n    // Macros (tick-defines)\n    if (ch == '`') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"def\";\n      } else {\n        return null;\n      }\n    }\n    // System calls\n    if (ch == '$') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"meta\";\n      } else {\n        return null;\n      }\n    }\n    // Time literals\n    if (ch == '#') {\n      stream.next();\n      stream.eatWhile(/[\\d_.]/);\n      return \"def\";\n    }\n    // Strings\n    if (ch == '\"') {\n      stream.next();\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    // Comments\n    if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      stream.backUp(1);\n    }\n\n    // Numeric literals\n    if (stream.match(realLiteral) ||\n        stream.match(decimalLiteral) ||\n        stream.match(binaryLiteral) ||\n        stream.match(octLiteral) ||\n        stream.match(hexLiteral) ||\n        stream.match(unsignedNumber) ||\n        stream.match(realLiteral)) {\n      return \"number\";\n    }\n\n    // Operators\n    if (stream.eatWhile(isOperatorChar)) {\n      return \"meta\";\n    }\n\n    // Keywords / plain variables\n    if (stream.eatWhile(/[\\w\\$_]/)) {\n      var cur = stream.current();\n      if (keywords[cur]) {\n        if (openClose[cur]) {\n          curPunc = \"newblock\";\n        }\n        if (statementKeywords[cur]) {\n          curPunc = \"newstatement\";\n        }\n        curKeyword = cur;\n        return \"keyword\";\n      }\n      return \"variable\";\n    }\n\n    stream.next();\n    return null;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    var c = new Context(indent, col, type, null, state.context);\n    return state.context = c;\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\") {\n      state.indented = state.context.indented;\n    }\n    return state.context = state.context.prev;\n  }\n\n  function isClosing(text, contextClosing) {\n    if (text == contextClosing) {\n      return true;\n    } else {\n      // contextClosing may be multiple keywords separated by ;\n      var closingKeywords = contextClosing.split(\";\");\n      for (var i in closingKeywords) {\n        if (text == closingKeywords[i]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on any bracket char: {}()[]\n    // or on a match of any of the block closing keywords, at\n    // the end of a line\n    var allClosings = [];\n    for (var i in openClose) {\n      if (openClose[i]) {\n        var closings = openClose[i].split(\";\");\n        for (var j in closings) {\n          allClosings.push(closings[j]);\n        }\n      }\n    }\n    var re = new RegExp(\"[{}()\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n    return re;\n  }\n\n  // Interface\n  return {\n\n    // Regex to force current line to reindent\n    electricInput: buildElectricInputRegEx(),\n\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n      if (hooks.startState) hooks.startState(state);\n      return state;\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (hooks.token) {\n        // Call hook, with an optional return value of a style to override verilog styling.\n        var style = hooks.token(stream, state);\n        if (style !== undefined) {\n          return style;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      curKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\" || style == \"variable\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == ctx.type) {\n        popContext(state);\n      } else if ((curPunc == \";\" && ctx.type == \"statement\") ||\n               (ctx.type && isClosing(curKeyword, ctx.type))) {\n        ctx = popContext(state);\n        while (ctx && ctx.type == \"statement\") ctx = popContext(state);\n      } else if (curPunc == \"{\") {\n        pushContext(state, stream.column(), \"}\");\n      } else if (curPunc == \"[\") {\n        pushContext(state, stream.column(), \"]\");\n      } else if (curPunc == \"(\") {\n        pushContext(state, stream.column(), \")\");\n      } else if (ctx && ctx.type == \"endcase\" && curPunc == \":\") {\n        pushContext(state, stream.column(), \"statement\");\n      } else if (curPunc == \"newstatement\") {\n        pushContext(state, stream.column(), \"statement\");\n      } else if (curPunc == \"newblock\") {\n        if (curKeyword == \"function\" && ctx && (ctx.type == \"statement\" || ctx.type == \"endgroup\")) {\n          // The 'function' keyword can appear in some other contexts where it actually does not\n          // indicate a function (import/export DPI and covergroup definitions).\n          // Do nothing in this case\n        } else if (curKeyword == \"task\" && ctx && ctx.type == \"statement\") {\n          // Same thing for task\n        } else {\n          var close = openClose[curKeyword];\n          pushContext(state, stream.column(), close);\n        }\n      }\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      if (hooks.indent) {\n        var fromHook = hooks.indent(state);\n        if (fromHook >= 0) return fromHook;\n      }\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = false;\n      var possibleClosing = textAfter.match(closingBracketOrWord);\n      if (possibleClosing)\n        closing = isClosing(possibleClosing[0], ctx.type);\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);\n      else if (ctx.type == \")\" && !closing) return ctx.indented + statementIndentUnit;\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"indent\"\n  };\n});\n\n  CodeMirror.defineMIME(\"text/x-verilog\", {\n    name: \"verilog\"\n  });\n\n  CodeMirror.defineMIME(\"text/x-systemverilog\", {\n    name: \"verilog\"\n  });\n\n\n\n  // TL-Verilog mode.\n  // See tl-x.org for language spec.\n  // See the mode in action at makerchip.com.\n  // Contact: steve.hoover@redwoodeda.com\n\n  // TLV Identifier prefixes.\n  // Note that sign is not treated separately, so \"+/-\" versions of numeric identifiers\n  // are included.\n  var tlvIdentifierStyle = {\n    \"|\": \"link\",\n    \">\": \"property\",  // Should condition this off for > TLV 1c.\n    \"$\": \"variable\",\n    \"$$\": \"variable\",\n    \"?$\": \"qualifier\",\n    \"?*\": \"qualifier\",\n    \"-\": \"hr\",\n    \"/\": \"property\",\n    \"/-\": \"property\",\n    \"@\": \"variable-3\",\n    \"@-\": \"variable-3\",\n    \"@++\": \"variable-3\",\n    \"@+=\": \"variable-3\",\n    \"@+=-\": \"variable-3\",\n    \"@--\": \"variable-3\",\n    \"@-=\": \"variable-3\",\n    \"%+\": \"tag\",\n    \"%-\": \"tag\",\n    \"%\": \"tag\",\n    \">>\": \"tag\",\n    \"<<\": \"tag\",\n    \"<>\": \"tag\",\n    \"#\": \"tag\",  // Need to choose a style for this.\n    \"^\": \"attribute\",\n    \"^^\": \"attribute\",\n    \"^!\": \"attribute\",\n    \"*\": \"variable-2\",\n    \"**\": \"variable-2\",\n    \"\\\\\": \"keyword\",\n    \"\\\"\": \"comment\"\n  };\n\n  // Lines starting with these characters define scope (result in indentation).\n  var tlvScopePrefixChars = {\n    \"/\": \"beh-hier\",\n    \">\": \"beh-hier\",\n    \"-\": \"phys-hier\",\n    \"|\": \"pipe\",\n    \"?\": \"when\",\n    \"@\": \"stage\",\n    \"\\\\\": \"keyword\"\n  };\n  var tlvIndentUnit = 3;\n  var tlvTrackStatements = false;\n  var tlvIdentMatch = /^([~!@#\\$%\\^&\\*-\\+=\\?\\/\\\\\\|'\"<>]+)([\\d\\w_]*)/;  // Matches an identifiere.\n  // Note that ':' is excluded, because of it's use in [:].\n  var tlvFirstLevelIndentMatch = /^[! ]  /;\n  var tlvLineIndentationMatch = /^[! ] */;\n  var tlvCommentMatch = /^\\/[\\/\\*]/;\n\n\n  // Returns a style specific to the scope at the given indentation column.\n  // Type is one of: \"indent\", \"scope-ident\", \"before-scope-ident\".\n  function tlvScopeStyle(state, indentation, type) {\n    // Begin scope.\n    var depth = indentation / tlvIndentUnit;  // TODO: Pass this in instead.\n    return \"tlv-\" + state.tlvIndentationStyle[depth] + \"-\" + type;\n  }\n\n  // Return true if the next thing in the stream is an identifier with a mnemonic.\n  function tlvIdentNext(stream) {\n    var match;\n    return (match = stream.match(tlvIdentMatch, false)) && match[2].length > 0;\n  }\n\n  CodeMirror.defineMIME(\"text/x-tlv\", {\n    name: \"verilog\",\n\n    hooks: {\n\n      electricInput: false,\n\n\n      // Return undefined for verilog tokenizing, or style for TLV token (null not used).\n      // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting\n      // can be enabled with the definition of cm-tlv-* styles, including highlighting for:\n      //   - M4 tokens\n      //   - TLV scope indentation\n      //   - Statement delimitation (enabled by tlvTrackStatements)\n      token: function(stream, state) {\n        var style = undefined;\n        var match;  // Return value of pattern matches.\n\n        // Set highlighting mode based on code region (TLV or SV).\n        if (stream.sol() && ! state.tlvInBlockComment) {\n          // Process region.\n          if (stream.peek() == '\\\\') {\n            style = \"def\";\n            stream.skipToEnd();\n            if (stream.string.match(/\\\\SV/)) {\n              state.tlvCodeActive = false;\n            } else if (stream.string.match(/\\\\TLV/)){\n              state.tlvCodeActive = true;\n            }\n          }\n          // Correct indentation in the face of a line prefix char.\n          if (state.tlvCodeActive && stream.pos == 0 &&\n              (state.indented == 0) && (match = stream.match(tlvLineIndentationMatch, false))) {\n            state.indented = match[0].length;\n          }\n\n          // Compute indentation state:\n          //   o Auto indentation on next line\n          //   o Indentation scope styles\n          var indented = state.indented;\n          var depth = indented / tlvIndentUnit;\n          if (depth <= state.tlvIndentationStyle.length) {\n            // not deeper than current scope\n\n            var blankline = stream.string.length == indented;\n            var chPos = depth * tlvIndentUnit;\n            if (chPos < stream.string.length) {\n              var bodyString = stream.string.slice(chPos);\n              var ch = bodyString[0];\n              if (tlvScopePrefixChars[ch] && ((match = bodyString.match(tlvIdentMatch)) &&\n                  tlvIdentifierStyle[match[1]])) {\n                // This line begins scope.\n                // Next line gets indented one level.\n                indented += tlvIndentUnit;\n                // Style the next level of indentation (except non-region keyword identifiers,\n                //   which are statements themselves)\n                if (!(ch == \"\\\\\" && chPos > 0)) {\n                  state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];\n                  if (tlvTrackStatements) {state.statementComment = false;}\n                  depth++;\n                }\n              }\n            }\n            // Clear out deeper indentation levels unless line is blank.\n            if (!blankline) {\n              while (state.tlvIndentationStyle.length > depth) {\n                state.tlvIndentationStyle.pop();\n              }\n            }\n          }\n          // Set next level of indentation.\n          state.tlvNextIndent = indented;\n        }\n\n        if (state.tlvCodeActive) {\n          // Highlight as TLV.\n\n          var beginStatement = false;\n          if (tlvTrackStatements) {\n            // This starts a statement if the position is at the scope level\n            // and we're not within a statement leading comment.\n            beginStatement =\n                   (stream.peek() != \" \") &&   // not a space\n                   (style === undefined) &&    // not a region identifier\n                   !state.tlvInBlockComment && // not in block comment\n                   //!stream.match(tlvCommentMatch, false) && // not comment start\n                   (stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit);  // at scope level\n            if (beginStatement) {\n              if (state.statementComment) {\n                // statement already started by comment\n                beginStatement = false;\n              }\n              state.statementComment =\n                   stream.match(tlvCommentMatch, false); // comment start\n            }\n          }\n\n          var match;\n          if (style !== undefined) {\n            // Region line.\n            style += \" \" + tlvScopeStyle(state, 0, \"scope-ident\")\n          } else if (((stream.pos / tlvIndentUnit) < state.tlvIndentationStyle.length) &&\n                     (match = stream.match(stream.sol() ? tlvFirstLevelIndentMatch : /^   /))) {\n            // Indentation\n            style = // make this style distinct from the previous one to prevent\n                    // codemirror from combining spans\n                    \"tlv-indent-\" + (((stream.pos % 2) == 0) ? \"even\" : \"odd\") +\n                    // and style it\n                    \" \" + tlvScopeStyle(state, stream.pos - tlvIndentUnit, \"indent\");\n            // Style the line prefix character.\n            if (match[0].charAt(0) == \"!\") {\n              style += \" tlv-alert-line-prefix\";\n            }\n            // Place a class before a scope identifier.\n            if (tlvIdentNext(stream)) {\n              style += \" \" + tlvScopeStyle(state, stream.pos, \"before-scope-ident\");\n            }\n          } else if (state.tlvInBlockComment) {\n            // In a block comment.\n            if (stream.match(/^.*?\\*\\//)) {\n              // Exit block comment.\n              state.tlvInBlockComment = false;\n              if (tlvTrackStatements && !stream.eol()) {\n                // Anything after comment is assumed to be real statement content.\n                state.statementComment = false;\n              }\n            } else {\n              stream.skipToEnd();\n            }\n            style = \"comment\";\n          } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {\n            // Start comment.\n            if (match[0] == \"//\") {\n              // Line comment.\n              stream.skipToEnd();\n            } else {\n              // Block comment.\n              state.tlvInBlockComment = true;\n            }\n            style = \"comment\";\n          } else if (match = stream.match(tlvIdentMatch)) {\n            // looks like an identifier (or identifier prefix)\n            var prefix = match[1];\n            var mnemonic = match[2];\n            if (// is identifier prefix\n                tlvIdentifierStyle.hasOwnProperty(prefix) &&\n                // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)\n                (mnemonic.length > 0 || stream.eol())) {\n              style = tlvIdentifierStyle[prefix];\n              if (stream.column() == state.indented) {\n                // Begin scope.\n                style += \" \" + tlvScopeStyle(state, stream.column(), \"scope-ident\")\n              }\n            } else {\n              // Just swallow one character and try again.\n              // This enables subsequent identifier match with preceding symbol character, which\n              //   is legal within a statement.  (Eg, !$reset).  It also enables detection of\n              //   comment start with preceding symbols.\n              stream.backUp(stream.current().length - 1);\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^\\t+/)) {\n            // Highlight tabs, which are illegal.\n            style = \"tlv-tab\";\n          } else if (stream.match(/^[\\[\\]{}\\(\\);\\:]+/)) {\n            // [:], (), {}, ;.\n            style = \"meta\";\n          } else if (match = stream.match(/^[mM]4([\\+_])?[\\w\\d_]*/)) {\n            // m4 pre proc\n            style = (match[1] == \"+\") ? \"tlv-m4-plus\" : \"tlv-m4\";\n          } else if (stream.match(/^ +/)){\n            // Skip over spaces.\n            if (stream.eol()) {\n              // Trailing spaces.\n              style = \"error\";\n            } else {\n              // Non-trailing spaces.\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^[\\w\\d_]+/)) {\n            // alpha-numeric token.\n            style = \"number\";\n          } else {\n            // Eat the next char w/ no formatting.\n            stream.next();\n            style = \"tlv-default\";\n          }\n          if (beginStatement) {\n            style += \" tlv-statement\";\n          }\n        } else {\n          if (stream.match(/^[mM]4([\\w\\d_]*)/)) {\n            // m4 pre proc\n            style = \"tlv-m4\";\n          }\n        }\n        return style;\n      },\n\n      indent: function(state) {\n        return (state.tlvCodeActive == true) ? state.tlvNextIndent : -1;\n      },\n\n      startState: function(state) {\n        state.tlvIndentationStyle = [];  // Styles to use for each level of indentation.\n        state.tlvCodeActive = true;  // True when we're in a TLV region (and at beginning of file).\n        state.tlvNextIndent = -1;    // The number of spaces to autoindent the next line if tlvCodeActive.\n        state.tlvInBlockComment = false;  // True inside /**/ comment.\n        if (tlvTrackStatements) {\n          state.statementComment = false;  // True inside a statement's header comment.\n        }\n      }\n\n    }\n  });\n});\n"],"sourceRoot":""}